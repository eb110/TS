GOLDEN RULES

- it is always good to install git bash 
- and then use it as a main terminal source

- if we want to create a new git (not depend on clone one)
- git init

- git repository has got a structure of a branch
- at the top is the 'root branch' usually called 'main'
- from the root branch emerges child branches

                    -- ticket
        -- develop
main --
        -- test
                    -- unit

- new branch always has to depend to its parent branch
- it is not possible to create a totally independent branch

- lets say 'develop' has new commit. to have this change in 'ticket'
- have to checkout to 'ticket' and pull 'develop'

- lets say 'ticket' has new commit. to have this change in 'develop'
- have to checkout to 'develop' and merge 'ticket'

- to have 'remote' repo we have to have git oline account
- to have the access to the repo we have to clone it
- to have the admin access - clone it with attached token

ADD ###########################################################

git add .
git commit -m "description"
git push

BRANCH ########################################################

change branch
git checkout <name of branch>

list of local branches
git branch

list of remote branches
git branch -r

new local branch
git branch <branchname>

new remote branch
git branch <new branch name>
git checkout <new branch name>
git push origin <new branch name>

remove of local branch
git branch -D <name of the branch>

remove of remote branch
git push -d origin <name of the branch>

CLONE ###################################################################

clone online repository with admin access
git clone https://<token>@github.com/<git remote user>/<git remote repo>

COMMIT ##################################################################

git add .
git commit -m "description"
git push

INIT ####################################################################

go to the root folder of the project
git init

MERGE ###################################################################

git checkout <parrent branch>
git merge <name of branch>
git push <name of parrent branch>

PULL ####################################################################

pull remote branch
git pull origin <name of branch>

pull remote parrent branch 
git checkout <child branch>
git pull origin <parrent branch name>

PUSH #####################################################################

git add .
git commit -m "description"

local push
git push

remote push
git push origin <name of branch>

STATUS #####################################################################
git status